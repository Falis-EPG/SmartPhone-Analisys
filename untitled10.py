# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W7wF_lgn21-mOaJz7JjXSYaOR_yueu9b
"""

!pip install shap

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Embedding, Input
from tensorflow.keras.utils import to_categorical

df = pd.read_csv('smartphones_cleaned_v6.csv')
marca_mais_vendida = df.groupby('brand_name')['price'].sum().idxmax()
vendas_marca_mais_vendida = df.groupby('brand_name')['price'].sum().max()

plt.figure(figsize=(10, 6))
plt.bar(df['brand_name'].unique(), df['brand_name'].value_counts())
plt.xlabel('Marca')
plt.ylabel('Quantidade de Smartphones Vendidos')
plt.title('Quantidade de Smartphones Vendidos por Marca')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.annotate(f"Marca Mais Vendida: {marca_mais_vendida}\nVendas Totais: R${vendas_marca_mais_vendida:,}",
             xy=(marca_mais_vendida, vendas_marca_mais_vendida + 1000),
             xytext=(0.5, 1),
             arrowprops=dict(facecolor='green', arrowstyle='->'),
             fontsize=10)

plt.show()

preco_medio_por_marca = df.groupby('brand_name')['price'].mean().sort_values(ascending=False)
plt.figure(figsize=(12, 8))
plt.barh(preco_medio_por_marca.index, preco_medio_por_marca.values, color='skyblue')
plt.xlabel('Preço Médio de Venda (R$)')
plt.ylabel('Marca')
plt.title('Preço Médio de Venda por Marca de Smartphone')
plt.gca().invert_yaxis()  # Inverter ordem das marcas (opcional)
plt.grid(axis='x', linestyle='--', alpha=0.6)
plt.tight_layout()

plt.show()

caracteristicas_relevantes = ['processor_brand', 'num_cores', 'processor_speed', 'ram_capacity',
                           'primary_camera_rear', 'num_rear_cameras', 'internal_memory']
df_encoded = pd.get_dummies(df[caracteristicas_relevantes], drop_first=True)
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df_normalized = scaler.fit_transform(df_encoded.values)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(df_normalized, df['price'], test_size=0.2, random_state=42)
model = Sequential()
model.add(Input(shape=(X_train.shape[1],)))
model.add(Dense(64, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='sigmoid')) # Output a probability
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) # Use binary_crossentropy loss
model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.1)
model.evaluate(X_test, y_test)

